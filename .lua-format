# Documentation: See https://github.com/Koihik/LuaFormatter

# How many characters should fit into a single column (line)
# type: int, default: 80
column_limit: 118

# The number of spaces used for indentation
# type: int, default: 4
indent_width: 1

# Use tab for indent (instead of spaces)
# type: bool, default: false
use_tab: true

# Indent width for continuations line
# type: int, default: 4
continuation_indent_width: 2

# Allow format simple control block (e.g., if, while, for, ...) to one line.
# type: bool, default: true
keep_simple_control_block_one_line: false

# Allow format simple function to one line.
# type: bool, default: true
keep_simple_function_one_line: false

# Align arguments of a function call if there is a line break. If false, use continuation_indent_width to indentation.
# type: bool, default: true
align_args: true

# Break after '(' of function call if columns greater than column_limit.
# type: bool, default: false
break_after_functioncall_lp: false

# Break before ')' of function call if columns greater than column_limit.
# type: bool, default: false
break_before_functioncall_rp: false

# Align parameter of function define if there is a line break. if false, use continuation_indent_width to indentation.
# type: bool, default: true
align_parameter: true

# Chop down all parameters if the function declaration doesnâ€™t fit on a line.
# type: bool, default: false
chop_down_parameter: true

# Break after '(' of function define if columns greater than column_limit.
# type: bool, default: false
break_after_functiondef_lp: true

# Break before ')' of function define if columns greater than column_limit.
# type: bool, default: false
break_before_functiondef_rp: true

# Align fields of a table if there is a line break. if false, use indent_width to indentation.
# type: bool, default: true
align_table_field: true

# Break after '{' of a table if columns greater than column_limit.
# type: bool, default: true
break_after_table_lb: true

# Break before '}' of a table if columns greater than column_limit.
# type: bool, default: true
break_before_table_rb: true

# Chop down any table.
# type: bool, default: false
chop_down_table: true

# Chop down table if a table contains a key.
# type: bool, default: true
chop_down_kv_table: true

# The column limit of each line of a table. Default value the same as column_limit value.
# type: int, default: column_limit
column_table_limit: 118

# Define character to separate table fields.
# type: str, default: ','
table_sep: ','

# Add an extra field separator after the last field unless the table is in a single line.
# type: bool, default: false
extra_sep_at_table_end: true

# Put break after operators if columns greater than column_limit. If false, put break before operators.
# type: bool, default: true
break_after_operator: true

# Transform string literals to use double quotes.
# type: bool, default: false
single_quote_to_double_quote: true

# Transform string literals to use a single quote.
# type: bool, default: false
double_quote_to_single_quote: false

# Inserts a space on function calls with parentheses omitted.
# type: int, default: 1
spaces_before_call: 1

# Inserts spaces inside the parenthesis in a function header.
# type: bool, default: false
spaces_inside_functiondef_parens: false

# Inserts spaces inside the parenthesis in a function call.
# type: bool, default: false
spaces_inside_functioncall_parens: false

# Inserts spaces inside the braces in a table constructor.
# type: bool, default: false
spaces_inside_table_braces: true

# Inserts spaces around the equal sign in key/value fields. Other assignments are not affected, though they may be affected by other options or behavior of the formatter.
# type: bool, default: true
spaces_around_equals_in_field: true

# Line breaks after the function body
# type: int, default: 1
line_breaks_after_function_body: 1
